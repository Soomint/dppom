<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<!-- 스프링 프레임워크는 아래에 지정된 패키지를 스캔하다가  @Controller 어노테이션을 만나게 되면 해당 클래스를 컨트롤러로 인식하게 된다. -->
	<context:component-scan base-package="com.kosmo.Dppom" />
	<context:component-scan base-package="dppom.controller" />
	
		<!-- JDBC템플릿 설정 : datasource 빈을 생성함 -->
	<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
		<beans:property name="username" value="dppom"/>
		<beans:property name="password" value="1234"/>
	</beans:bean>
	
	<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
		 <!-- 트랜젝션 03 > 트랜젝션템플릿 사용 -->
<!-- 	 <beans:bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<beans:property name="dataSource" ref="dataSource"/>
	 </beans:bean>
	 <beans:bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
	 	<beans:property name="transactionManager" ref="transactionManager"/>
	 </beans:bean>
	 <beans:bean name="TransactionDao" class="dppom.model.member.PointDAO">
	 	<beans:property name="template" ref="template"/>
	 	<beans:property name="transactionTemplate" ref="transactionTemplate"/>
	 </beans:bean> -->
	 
	 <!-- mybatis 매핑 설정 -->
	 <beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property name="mapperLocations" value="classpath:dppom/mapper/*.xml"/>
	</beans:bean>
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory"/> 
	</beans:bean>
	
	<!-- MultipartResolver 설정 -->
   <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
      <beans:property name="maxUploadSize" value="209715200" /> 
      <beans:property name="maxInMemorySize" value="209715200" />
   </beans:bean>
   
   <!-- 업로드 파일크기 예외 처리 설정(로컬서버는 안먹힘) -->
   <beans:bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> 
       <beans:property name="exceptionMappings"> 
          <beans:props> 
             <beans:prop key="org.springframework.web.multipart.MaxUploadSizeExceededException"> 
                UploadErrorPage
             </beans:prop>
          </beans:props> 
       </beans:property> 
   </beans:bean>

	
	
	
</beans:beans>
